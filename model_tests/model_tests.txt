1:

 ============= REGRESSOR ======================
Training set : 3985 data points
[-0.03448467 -0.0390112  -0.03901193 -0.03368829 -0.03276954]
Neg Mean Squared Error: -0.03579313 (+/- 0.00536665)
 ============= CLASSIFIER =====================
Training set : 3985 data points
[ 0.92490119  0.92021277  0.94087404  0.93840105  0.86389201]
F1: 0.91765621 (+/- 0.05599307)
[ 0.94101877  0.94277929  0.93129771  0.94708995  0.76190476]
Precision: 0.90481810 (+/- 0.14328668)
[ 0.90932642  0.8987013   0.95064935  0.92987013  0.9974026 ]
Recall: 0.93718996 (+/- 0.06996028)
[ 0.92857143  0.92471769  0.94228356  0.94102886  0.84798995]
Accuracy: 0.91691830 (+/- 0.07027067)
[-0.17952582 -0.20701513 -0.15677661 -0.15809263 -0.37085261]
Neg Log Loss: -0.21445256 (+/- 0.16059670)

ONLY TFIDF

 ============= REGRESSOR ======================
Training set : 3985 data points
[-0.0431486  -0.05015858 -0.04480187 -0.0407079  -0.04260164]
Neg Mean Squared Error: -0.04428372 (+/- 0.00643036)
 ============= CLASSIFIER =====================
Training set : 3985 data points
[ 0.91264668  0.90305445  0.92975734  0.91367862  0.86004515]
F1: 0.90383645 (+/- 0.04702910)
[ 0.91863517  0.92391304  0.91457286  0.93478261  0.76047904]
Precision: 0.89047655 (+/- 0.13070247)
[ 0.90673575  0.88311688  0.94545455  0.89350649  0.98961039]
Recall: 0.92368481 (+/- 0.07830127)
[ 0.9160401   0.90840652  0.93099122  0.91844417  0.84422111]
Accuracy: 0.90362062 (+/- 0.06115121)
[-0.20061432 -0.22019592 -0.18720756 -0.1925108  -0.37102414]
Neg Log Loss: -0.23431055 (+/- 0.13853858

2: self.trigrams_phrases = Phrases(self.bigrams_phraser[doc_list], min_count=7) --> 15

NORMAL

 ============= REGRESSOR ======================
Training set : 3985 data points
[-0.03453723 -0.03753465 -0.03761309 -0.03411051 -0.03282932]
Neg Mean Squared Error: -0.03532496 (+/- 0.00384103)
 ============= CLASSIFIER =====================
Training set : 3985 data points
[ 0.92715232  0.92734478  0.94223363  0.94102228  0.86358512]
F1: 0.92026763 (+/- 0.05812850)
[ 0.94850949  0.94354839  0.93147208  0.94973545  0.76294821]
Precision: 0.90724272 (+/- 0.14487139)
[ 0.90673575  0.91168831  0.95324675  0.93246753  0.99480519]
Recall: 0.93978871 (+/- 0.06414772)
[ 0.93107769  0.93099122  0.94353827  0.94353827  0.84798995]
Accuracy: 0.91942708 (+/- 0.07230728)
[-0.18287104 -0.19845663 -0.15013478 -0.16440442 -0.37004478]
Neg Log Loss: -0.21318233 (+/- 0.16023914)

ONLY TFIDF

 ============= REGRESSOR ======================
Training set : 3985 data points
[-0.04153412 -0.04837015 -0.0440567  -0.03883105 -0.0410094 ]
Neg Mean Squared Error: -0.04276028 (+/- 0.00652130)
 ============= CLASSIFIER =====================
Training set : 3985 data points
[ 0.92167102  0.92105263  0.94058154  0.91367862  0.86394558]
F1: 0.91218588 (+/- 0.05141405)
[ 0.92894737  0.93333333  0.91625616  0.93478261  0.7665996 ]
Precision: 0.89598381 (+/- 0.13004052)
[ 0.91450777  0.90909091  0.96623377  0.89350649  0.98961039]
Recall: 0.93458987 (+/- 0.07359307)
[ 0.92481203  0.92471769  0.94102886  0.91844417  0.84924623]
Accuracy: 0.91164980 (+/- 0.06417172)
[-0.20214194 -0.20990285 -0.17345582 -0.19341865 -0.35756022]
Neg Log Loss: -0.22729590 (+/- 0.13251552)

AFTER SOME TUNING

 ============= REGRESSOR ======================
Training set : 3985 data points
[-0.03453723 -0.03753465 -0.03761309 -0.03411051 -0.03282932]
Neg Mean Squared Error: -0.03532496 (+/- 0.00384103)
 ============= CLASSIFIER =====================
Training set : 3985 data points
[ 0.92529489  0.92734478  0.94508301  0.94682231  0.85426009]
F1: 0.91976102 (+/- 0.06783525)
[ 0.93633952  0.94354839  0.92964824  0.94559585  0.75147929]
Precision: 0.90132226 (+/- 0.15026559)
[ 0.91450777  0.91168831  0.96103896  0.94805195  0.98961039]
Recall: 0.94497948 (+/- 0.05862485)
[ 0.92857143  0.93099122  0.94604768  0.94855709  0.83668342]
Accuracy: 0.91817017 (+/- 0.08300928)
[-0.19762537 -0.20479009 -0.17292537 -0.17702136 -0.36427664]
Neg Log Loss: -0.22332777 (+/- 0.14298399)

Process finished with exit code 0

3.

self.bigrams_phrases = Phrases(doc_list, min_count=15)
        self.bigrams_phraser = Phraser(self.bigrams_phrases)
        self.trigrams_phrases = Phrases(self.bigrams_phraser[doc_list], min_count=30)